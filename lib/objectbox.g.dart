// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/parking.dart';
import 'model/reservation.dart';
import 'model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6353678830082416211),
      name: 'Parking',
      lastPropertyId: const obx_int.IdUid(11, 170528317912568607),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3240805249438778791),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6514114126614129246),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8611324088859550299),
            name: 'ville',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8586599603996956097),
            name: 'quartier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 668036000693303221),
            name: 'desc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 260904586105901875),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4246167857576835913),
            name: 'timestamps',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8200519022815463402),
            name: 'placeMoto',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1224817285671122534),
            name: 'placeVehicule',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6437490815855454325),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 170528317912568607),
            name: 'longitude',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'reservations', srcEntity: 'Reservation', srcField: 'parking')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8159907560840296818),
      name: 'Reservation',
      lastPropertyId: const obx_int.IdUid(10, 3858404288891058867),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7280457618503297658),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4139484730214279951),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4484068162025723441),
            name: 'telephone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4205629253372065724),
            name: 'duree',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9210468407618631535),
            name: 'typeVehicule',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5768527659746168254),
            name: 'placeImmatriculation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5666839555420576004),
            name: 'timestamps',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7988282299326621260),
            name: 'marqueVehicule',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3858404288891058867),
            name: 'parkingId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 1193785123228840842),
            relationTarget: 'Parking')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7369281027258120482),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(4, 8771917880576056011),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4298554819078788168),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3390720170181826846),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6955413346300055504),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8771917880576056011),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 7369281027258120482),
      lastIndexId: const obx_int.IdUid(1, 1193785123228840842),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [2238749156609594555],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Parking: obx_int.EntityDefinition<Parking>(
        model: _entities[0],
        toOneRelations: (Parking object) => [],
        toManyRelations: (Parking object) => {
              obx_int.RelInfo<Reservation>.toOneBacklink(10, object.id,
                      (Reservation srcObject) => srcObject.parking):
                  object.reservations
            },
        getId: (Parking object) => object.id,
        setId: (Parking object, int id) {
          object.id = id;
        },
        objectToFB: (Parking object, fb.Builder fbb) {
          final nomOffset = fbb.writeString(object.nom);
          final villeOffset = fbb.writeString(object.ville);
          final quartierOffset = fbb.writeString(object.quartier);
          final descOffset = fbb.writeString(object.desc);
          final imagePathOffset = fbb.writeString(object.imagePath);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomOffset);
          fbb.addOffset(2, villeOffset);
          fbb.addOffset(3, quartierOffset);
          fbb.addOffset(4, descOffset);
          fbb.addOffset(5, imagePathOffset);
          fbb.addInt64(6, object.timestamps);
          fbb.addInt64(7, object.placeMoto);
          fbb.addInt64(8, object.placeVehicule);
          fbb.addFloat64(9, object.latitude);
          fbb.addFloat64(10, object.longitude);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final villeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final quartierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final placeMotoParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final placeVehiculeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final descParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final timestampsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final longitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final latitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final object = Parking(
              nom: nomParam,
              ville: villeParam,
              quartier: quartierParam,
              placeMoto: placeMotoParam,
              placeVehicule: placeVehiculeParam,
              desc: descParam,
              imagePath: imagePathParam,
              timestamps: timestampsParam,
              longitude: longitudeParam,
              latitude: latitudeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Parking>(
              object.reservations,
              store,
              obx_int.RelInfo<Reservation>.toOneBacklink(
                  10, object.id, (Reservation srcObject) => srcObject.parking));
          return object;
        }),
    Reservation: obx_int.EntityDefinition<Reservation>(
        model: _entities[1],
        toOneRelations: (Reservation object) => [object.parking],
        toManyRelations: (Reservation object) => {},
        getId: (Reservation object) => object.id,
        setId: (Reservation object, int id) {
          object.id = id;
        },
        objectToFB: (Reservation object, fb.Builder fbb) {
          final nomOffset = fbb.writeString(object.nom);
          final telephoneOffset = fbb.writeString(object.telephone);
          final dureeOffset = fbb.writeString(object.duree);
          final typeVehiculeOffset = fbb.writeString(object.typeVehicule);
          final placeImmatriculationOffset =
              fbb.writeString(object.placeImmatriculation);
          final marqueVehiculeOffset = fbb.writeString(object.marqueVehicule);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomOffset);
          fbb.addOffset(2, telephoneOffset);
          fbb.addOffset(3, dureeOffset);
          fbb.addOffset(4, typeVehiculeOffset);
          fbb.addOffset(5, placeImmatriculationOffset);
          fbb.addInt64(7, object.timestamps);
          fbb.addOffset(8, marqueVehiculeOffset);
          fbb.addInt64(9, object.parking.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final telephoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final dureeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final typeVehiculeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final placeImmatriculationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final marqueVehiculeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final timestampsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = Reservation(
              nom: nomParam,
              telephone: telephoneParam,
              duree: dureeParam,
              typeVehicule: typeVehiculeParam,
              placeImmatriculation: placeImmatriculationParam,
              marqueVehicule: marqueVehiculeParam,
              timestamps: timestampsParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.parking.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.parking.attach(store);
          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[2],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = User(
              name: nameParam, email: emailParam, password: passwordParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Parking] entity fields to define ObjectBox queries.
class Parking_ {
  /// See [Parking.id].
  static final id =
      obx.QueryIntegerProperty<Parking>(_entities[0].properties[0]);

  /// See [Parking.nom].
  static final nom =
      obx.QueryStringProperty<Parking>(_entities[0].properties[1]);

  /// See [Parking.ville].
  static final ville =
      obx.QueryStringProperty<Parking>(_entities[0].properties[2]);

  /// See [Parking.quartier].
  static final quartier =
      obx.QueryStringProperty<Parking>(_entities[0].properties[3]);

  /// See [Parking.desc].
  static final desc =
      obx.QueryStringProperty<Parking>(_entities[0].properties[4]);

  /// See [Parking.imagePath].
  static final imagePath =
      obx.QueryStringProperty<Parking>(_entities[0].properties[5]);

  /// See [Parking.timestamps].
  static final timestamps =
      obx.QueryIntegerProperty<Parking>(_entities[0].properties[6]);

  /// See [Parking.placeMoto].
  static final placeMoto =
      obx.QueryIntegerProperty<Parking>(_entities[0].properties[7]);

  /// See [Parking.placeVehicule].
  static final placeVehicule =
      obx.QueryIntegerProperty<Parking>(_entities[0].properties[8]);

  /// See [Parking.latitude].
  static final latitude =
      obx.QueryDoubleProperty<Parking>(_entities[0].properties[9]);

  /// See [Parking.longitude].
  static final longitude =
      obx.QueryDoubleProperty<Parking>(_entities[0].properties[10]);

  /// see [Parking.reservations]
  static final reservations =
      obx.QueryBacklinkToMany<Reservation, Parking>(Reservation_.parking);
}

/// [Reservation] entity fields to define ObjectBox queries.
class Reservation_ {
  /// See [Reservation.id].
  static final id =
      obx.QueryIntegerProperty<Reservation>(_entities[1].properties[0]);

  /// See [Reservation.nom].
  static final nom =
      obx.QueryStringProperty<Reservation>(_entities[1].properties[1]);

  /// See [Reservation.telephone].
  static final telephone =
      obx.QueryStringProperty<Reservation>(_entities[1].properties[2]);

  /// See [Reservation.duree].
  static final duree =
      obx.QueryStringProperty<Reservation>(_entities[1].properties[3]);

  /// See [Reservation.typeVehicule].
  static final typeVehicule =
      obx.QueryStringProperty<Reservation>(_entities[1].properties[4]);

  /// See [Reservation.placeImmatriculation].
  static final placeImmatriculation =
      obx.QueryStringProperty<Reservation>(_entities[1].properties[5]);

  /// See [Reservation.timestamps].
  static final timestamps =
      obx.QueryIntegerProperty<Reservation>(_entities[1].properties[6]);

  /// See [Reservation.marqueVehicule].
  static final marqueVehicule =
      obx.QueryStringProperty<Reservation>(_entities[1].properties[7]);

  /// See [Reservation.parking].
  static final parking =
      obx.QueryRelationToOne<Reservation, Parking>(_entities[1].properties[8]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[2].properties[0]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[2].properties[1]);

  /// See [User.email].
  static final email =
      obx.QueryStringProperty<User>(_entities[2].properties[2]);

  /// See [User.password].
  static final password =
      obx.QueryStringProperty<User>(_entities[2].properties[3]);
}
